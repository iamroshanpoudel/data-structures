public class BTree<T extends Comparable<T>>{

    private static class Node<T>{

	public T data;
	public Node<T> left;
	public Node<T> right;

	public Node(T d){
	    this.data = d;
	}

    }

    // fields for btree
    private Node<T> root;
    private int n;


    public BTree(){
	this.root = null;
	this.n = 0;
    }


    public void insert(T d){
	insert(this.root, d);
    }

    private void insert(Node<T> node, T d){
	if (node == null)
	    node = new Node<>(d);
	else if (d.compareTo(node.data) < 0)
	    insert(node.left, d);
	else if (d.compareTo(node.data) > 0)
	    insert(node.right, d);
	this.n++;
    }

    public Node<T> find(T d){
	
    }
    
    public boolean remove(T d){
	
    }
    public static void main(String[] args){
	BTree<Integer>  tree = new BTree<>();
	tree.insert(7);
	tree.insert(5);
	tree.insert(9);
	tree.insert(4);
	tree.insert(6);
	tree.insert(2);
	tree.insert(10);
    }
}
